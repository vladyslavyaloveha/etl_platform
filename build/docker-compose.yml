---

x-env-common: &env-common
  # ETL
  TABLE_NAME: ${TABLE_NAME?}

  # Gcp
  GCP_CREDENTIALS_PATH: ${GCP_CREDENTIALS_PATH?}
  GCP_PROJECT_NAME: ${GCP_PROJECT_NAME?}
  BQ_DATASET_NAME: ${BQ_DATASET_NAME?}

  GCS_BUCKET_NAME: ${GCS_BUCKET_NAME?}

  # Aws
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID?}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY?}
  AWS_REGION: ${AWS_REGION?}

  S3_BUCKET_NAME: ${S3_BUCKET_NAME?}

  REDSHIFT_HOST: ${REDSHIFT_HOST?}
  REDSHIFT_PORT: ${REDSHIFT_PORT?}
  REDSHIFT_DATABASE: ${REDSHIFT_DATABASE?}
  REDSHIFT_CLUSTER: ${REDSHIFT_CLUSTER?}
  REDSHIFT_MASTER_USERNAME: ${REDSHIFT_MASTER_USERNAME?}
  REDSHIFT_MASTER_PASSWORD: ${REDSHIFT_MASTER_PASSWORD?}

x-airflow-common: &airflow-common
  build: .
  environment:
    &airflow-common-env

    AIRFLOW_VERSION: ${AIRFLOW_VERSION?}
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER?}:${POSTGRES_PASSWORD?}@postgres/${POSTGRES_DB?}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${POSTGRES_USER?}:${POSTGRES_PASSWORD?}@postgres/${POSTGRES_DB?}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'

    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME?}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD?}

    # Spark
    SPARK_MASTER_URL: ${SPARK_MASTER_URL?}

    <<: *env-common

  volumes:
    - ./../etl/dags:/opt/airflow/dags
    - ./../etl/logs:/opt/airflow/logs
    - ./../etl/config:/opt/airflow/config
    - ./../etl/plugins:/opt/airflow/plugins
    - ./../credentials:/opt/airflow/credentials

  user: "${AIRFLOW_UID?}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

x-spark-common: &spark-common
  SPARK_USER: ${SPARK_USER?}
  SPARK_RPC_AUTHENTICATION_ENABLED: no
  SPARK_RPC_ENCRYPTION_ENABLED: no
  SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
  SPARK_SSL_ENABLED: no


services:
  postgres:
    image: "postgres:${POSTGRES_VERSION?}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER?}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?}
      POSTGRES_DB: ${POSTGRES_DB?}
    ports:
      - "5432:5432/tcp"
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080/tcp"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./../etl}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    environment:
      FLOWER_BASIC_AUTH: ${FLOWER_USER?}:${FLOWER_PASSWORD?}
    ports:
      - "5555:5555/tcp"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  spark-master:
    image: "bitnami/spark:${SPARK_VERSION?}"
    container_name: spark-master
    ports:
      - "8082:8080/tcp"
      - "7077:7077/tcp"
    environment:
      <<: *spark-common
      SPARK_MODE: master
    depends_on:
      - airflow-webserver
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./../etl}/dags:/opt/airflow/dags

  spark-worker-1:
    image: "bitnami/spark:${SPARK_VERSION?}"
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8080/tcp"
      - "4041:4040/tcp"
    environment:
      <<: *spark-common
      SPARK_MODE: worker
      SPARK_MASTER_URL: ${SPARK_MASTER_URL?}
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
    volumes:
      - ${AIRFLOW_PROJ_DIR:-./../etl}/dags:/opt/airflow/dags

  backend:
    build:
      context: ../backend
    command: [ "--host", "0.0.0.0", "--port", "80", "--proxy-headers" ]
    environment:
      <<: *env-common
    depends_on:
      - airflow-webserver
      - spark-master
    ports:
      - "8009:80"
    volumes:
      - ./../backend/app:/code/app
      - ./../credentials:/opt/airflow/credentials
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`fastapi.localhost`)"

  traefik:
    image: "traefik:${TRAEFIK_VERSION?}"
    command:
      - --accesslog=true
      - --api.insecure=true
      - --entrypoints.http.address=:80
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
    ports:
      - "8008:80/tcp"
      - "8085:8080/tcp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - backend

volumes:
  db:
